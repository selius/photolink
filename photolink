#!/usr/bin/env python

import argparse
import os
import shutil
import sys
import codecs
import locale

from logger import SilentLogger, VerboseLogger
from links import LinkCreator
from source import ShotwellDB


def main():
	DB_PATH = "~/.local/share/shotwell/data/photo.db"

	TAGS_DIR = "_tags"
	EVENTS_DIR = "_events"

	sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout)

	argParser = argparse.ArgumentParser(description="Organize photos by events and tags using hard links")
	argParser.add_argument("path", help="the base path for _events and _tags directories, created if doesn't exist")
	argParser.add_argument(
		"-r", "--recreate", help="remove and recreate _events and _tags directories", action="store_true")
	argParser.add_argument(
		"-v", "--verbose", help="print a message for each directory and link created", action="store_true")
	argParser.add_argument(
		"-n", "--dry-run",
		help=
			"iterate over the photo collection, but don't make any changes to the file system; "
			"useful with -v to see what would be done",
		action="store_true"
	)

	args = argParser.parse_args()

	dbPath = os.path.expanduser(DB_PATH)
	tagsPath = os.path.expanduser(os.path.join(args.path, TAGS_DIR))
	eventsPath = os.path.expanduser(os.path.join(args.path, EVENTS_DIR))

	if args.verbose:
		logger = VerboseLogger()
	else:
		logger = SilentLogger()

	logger.logPaths(tagsPath, eventsPath)

	if args.recreate and not args.dry_run:
		if os.path.exists(tagsPath):
			shutil.rmtree(tagsPath)
		if os.path.exists(eventsPath):
			shutil.rmtree(eventsPath)

	creator = LinkCreator(tagsPath, eventsPath, args.dry_run, logger)
	source = ShotwellDB(dbPath)

	creator.createLinks(source.getCollection())


if __name__ == '__main__':
	main()
